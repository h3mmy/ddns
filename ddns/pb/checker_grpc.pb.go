// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.2
// source: proto/checker.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DDNSServiceClient is the client API for DDNSService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DDNSServiceClient interface {
	UpdateDDNSRecord(ctx context.Context, in *DDNSUpdateRequest, opts ...grpc.CallOption) (*DDNSUpdateResponse, error)
	GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error)
	GetCurrentIP(ctx context.Context, in *GetCurrentIPRequest, opts ...grpc.CallOption) (*GetCurrentIPResponse, error)
}

type dDNSServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDDNSServiceClient(cc grpc.ClientConnInterface) DDNSServiceClient {
	return &dDNSServiceClient{cc}
}

func (c *dDNSServiceClient) UpdateDDNSRecord(ctx context.Context, in *DDNSUpdateRequest, opts ...grpc.CallOption) (*DDNSUpdateResponse, error) {
	out := new(DDNSUpdateResponse)
	err := c.cc.Invoke(ctx, "/pb.DDNSService/UpdateDDNSRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dDNSServiceClient) GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error) {
	out := new(GetStatusResponse)
	err := c.cc.Invoke(ctx, "/pb.DDNSService/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dDNSServiceClient) GetCurrentIP(ctx context.Context, in *GetCurrentIPRequest, opts ...grpc.CallOption) (*GetCurrentIPResponse, error) {
	out := new(GetCurrentIPResponse)
	err := c.cc.Invoke(ctx, "/pb.DDNSService/GetCurrentIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DDNSServiceServer is the server API for DDNSService service.
// All implementations must embed UnimplementedDDNSServiceServer
// for forward compatibility
type DDNSServiceServer interface {
	UpdateDDNSRecord(context.Context, *DDNSUpdateRequest) (*DDNSUpdateResponse, error)
	GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error)
	GetCurrentIP(context.Context, *GetCurrentIPRequest) (*GetCurrentIPResponse, error)
	mustEmbedUnimplementedDDNSServiceServer()
}

// UnimplementedDDNSServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDDNSServiceServer struct {
}

func (UnimplementedDDNSServiceServer) UpdateDDNSRecord(context.Context, *DDNSUpdateRequest) (*DDNSUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDDNSRecord not implemented")
}
func (UnimplementedDDNSServiceServer) GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedDDNSServiceServer) GetCurrentIP(context.Context, *GetCurrentIPRequest) (*GetCurrentIPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentIP not implemented")
}
func (UnimplementedDDNSServiceServer) mustEmbedUnimplementedDDNSServiceServer() {}

// UnsafeDDNSServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DDNSServiceServer will
// result in compilation errors.
type UnsafeDDNSServiceServer interface {
	mustEmbedUnimplementedDDNSServiceServer()
}

func RegisterDDNSServiceServer(s grpc.ServiceRegistrar, srv DDNSServiceServer) {
	s.RegisterService(&DDNSService_ServiceDesc, srv)
}

func _DDNSService_UpdateDDNSRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DDNSUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DDNSServiceServer).UpdateDDNSRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DDNSService/UpdateDDNSRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DDNSServiceServer).UpdateDDNSRecord(ctx, req.(*DDNSUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DDNSService_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DDNSServiceServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DDNSService/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DDNSServiceServer).GetStatus(ctx, req.(*GetStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DDNSService_GetCurrentIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DDNSServiceServer).GetCurrentIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DDNSService/GetCurrentIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DDNSServiceServer).GetCurrentIP(ctx, req.(*GetCurrentIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DDNSService_ServiceDesc is the grpc.ServiceDesc for DDNSService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DDNSService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.DDNSService",
	HandlerType: (*DDNSServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateDDNSRecord",
			Handler:    _DDNSService_UpdateDDNSRecord_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _DDNSService_GetStatus_Handler,
		},
		{
			MethodName: "GetCurrentIP",
			Handler:    _DDNSService_GetCurrentIP_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/checker.proto",
}
